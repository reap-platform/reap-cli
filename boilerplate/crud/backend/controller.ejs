package <%=metadata.groupId%>.web;

import org.reap.support.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.ExampleMatcher.StringMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import <%=metadata.groupId%>.common.Constants;
import <%=metadata.groupId%>.domain.<%=metadata.entity.name.firstUpperCase()%>;
import <%=metadata.groupId%>.domain.<%=metadata.entity.name.firstUpperCase()%>Repository;

@RestController
public class <%=metadata.entity.name.firstUpperCase()%>Controller {

	@Autowired
	private <%=metadata.entity.name.firstUpperCase()%>Repository <%=metadata.entity.name.firstLowerCase()%>Repository;

	@RequestMapping(path = "/<%=metadata.entity.name.firstLowerCase()%>", method = RequestMethod.POST)
	public Result<<%=metadata.entity.name.firstUpperCase()%>> create(@RequestBody <%=metadata.entity.name.firstUpperCase()%> entity) {
		return Result.newResult(<%=metadata.entity.name.firstLowerCase()%>Repository.save(entity));
	}

	@RequestMapping(path = "/<%=metadata.entity.name.firstLowerCase()%>", method = RequestMethod.PUT)
	public Result<<%=metadata.entity.name.firstUpperCase()%>> update(@RequestBody <%=metadata.entity.name.firstUpperCase()%> function) {
		return Result.newResult(<%=metadata.entity.name.firstLowerCase()%>Repository.updateIgnoreNull(function));
	}

	@RequestMapping(path = "/<%=metadata.entity.name.firstLowerCase()%>s", method = RequestMethod.GET)
	public Result<Page<<%=metadata.entity.name.firstUpperCase()%>>> search(@RequestParam(defaultValue = Constants.DEFAULT_PAGE_NUMBER) int page,
			@RequestParam(defaultValue = Constants.DEFAULT_PAGE_SIZE) int size, <%=metadata.entity.name.firstUpperCase()%> spec) {
		Example<<%=metadata.entity.name.firstUpperCase()%>> example = Example.of(spec,
				ExampleMatcher.matching().withStringMatcher(StringMatcher.CONTAINING));
		return Result.newResult(<%=metadata.entity.name.firstLowerCase()%>Repository.findAll(example, PageRequest.of(page, size)));
	}

	@RequestMapping(path = "/<%=metadata.entity.name.firstLowerCase()%>/{id}", method = RequestMethod.GET)
	public Result<<%=metadata.entity.name.firstUpperCase()%>> get(@PathVariable String id) {
		return Result.newResult(<%=metadata.entity.name.firstLowerCase()%>Repository.findById(id).get());
	}

	@RequestMapping(path = "/<%=metadata.entity.name.firstLowerCase()%>/{id}", method = RequestMethod.DELETE)
	public Result<?> delete(@PathVariable String id) {
		<%=metadata.entity.name.firstLowerCase()%>Repository.deleteById(id);
		return Result.newResult();
	}

}

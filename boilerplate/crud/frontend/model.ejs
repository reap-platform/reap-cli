import feedback from '../utils/feedback'
import { create, update, search, remove } from '../apis/<%=metadata.entity.name%>'
import { DEFAULT_PAGE_NUMBER, DEFAULT_PAGE_SIZE } from '../constants'

const { notification: { error } } = feedback


function pageRequest (state) {
  return {
    size: state.page && state.page.size,
    page: state.page && state.page.number,
  }
}

export default {
  state: {
    search: {
<%for(var i=0; i<metadata.entity.fields.length; i++) {%><%if(metadata.entity.fields[i].searchable) {%> <%=`    ${metadata.entity.fields[i].key}: null,` %>
<%}%><% }%>
    },
    showModal: false,
    page: {
      size: DEFAULT_PAGE_SIZE,
      number: DEFAULT_PAGE_NUMBER,
    },
    editRecord: null,
  },
  effects: {
    * search ({ page = DEFAULT_PAGE_NUMBER, size = DEFAULT_PAGE_SIZE }, { call, put, select }) {
      const state = yield select(rootState => rootState['<%=metadata._name%>'])
      const result = yield call(search, { size, page, ...state.search })
      if (result.success) {
        yield put({ type: 'setState', page: result.payload })
      } else {
        error(result)
      }
    },
    * update ({ data }, { call, put, select }) {
      const state = yield select(rootState => rootState['<%=metadata._name%>'])
      const result = yield call(update, data)
      if (result.success) {
        yield put({ type: 'setState', showModal: false, editRecord: null })
        yield put({
          type: 'search', ...pageRequest(state), 
        })
      } else {
        error(result)
      }
    },
    * remove ({ id }, { call, put, select }) {
      const result = yield call(remove, id)
      if (result.success) {
        const state = yield select(rootState => rootState['<%=metadata._name%>'])
        yield put({ type: 'search', ...pageRequest(state) })
      } else {
        error(result)
      }
    },
    * create ({ data, form }, { call, select, put }) {
      const state = yield select(rootState => rootState['<%=metadata._name%>'])
      const result = yield call(create, data)
      if (result.success) {
        form.resetFields()
        yield put({ type: 'setState', showModal: false, editRecord: null })
        yield put({ type: 'search', ...pageRequest(state) })
      } else {
        error(result)
      }
    },
  },
  reducers: {
    setState (state, newState) {
      return {
        ...state,
        ...newState,
        search: {
          ...state.search,
          ...newState.search,
        },
      }
    },
  },
  subscriptions: {
    setup ({funcCode, dispatch, history }) {
      history.listen((location) => {
        if (location.pathname === `/${funcCode}`) {
          dispatch({
            type: 'search', page: DEFAULT_PAGE_NUMBER, size: DEFAULT_PAGE_SIZE,
          })
        }
      })
    },
  },
}
